{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["business","Business","react_default","a","createElement","className","class","src","alt","React","Component","BusinessList","components_Business_Business","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","Object","keys","map","sortByOption","sortByOptionValue","key","this","renderSortByOptions","placeholder","href","App","components_SearchBar_SearchBar","components_BusinessList_BusinessList","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAIIA,oBAEI,uBAFJA,EAGO,sBAHPA,EAII,aAJJA,EAKK,KALLA,EAMO,QANPA,EAOQ,UAPRA,EAQM,IARNA,EASW,GA0BAC,mLArBP,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACvBH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,mBACTJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,kEAAkEC,IAAI,MAEjFN,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,IAAqBA,IAEvBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUL,EAAxB,UACAE,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,sBAhBWS,IAAMC,WCKdC,mLAdP,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACQ,EAAD,cATeH,IAAMC,WCA3BG,SAAgB,CAClBC,aAAc,aACdC,gBAAiB,SACjBC,gBAAiB,iBA+BJC,gMAzBT,OAAOC,OAAOC,KAAKN,GAAeO,IAAI,SAAAC,GAClC,IAAIC,EAAoBT,EAAcQ,GACtC,OAAOnB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,GAAoBD,sCAKxC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UAAKoB,KAAKC,wBAEZvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOsB,YAAY,8CACnBxB,EAAAC,EAAAC,cAAA,SAAOsB,YAAY,YAErBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,aAAR,qBAnBYlB,IAAMC,WCKjBkB,mLATX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,cANUrB,IAAMC,WCMJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77dcc4de.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nlet business = {\r\n  imageSrc: 'https://media.api.timbu.com/img/big/1-oak-place-abuja-68370.png',\r\n  name: 'MarginOtto Pizzeria',\r\n  address: '1010 Paddington Way',\r\n  city: 'Flavortown',\r\n  state: 'NY',\r\n  zipCode: '10101',\r\n  category: 'Italian',\r\n  rating: 4.5,\r\n  reviewCount: 90\r\n};\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (<div className=\"Business\">\r\n        <div class=\"image-container\">\r\n          <img src='https://media.api.timbu.com/img/big/1-oak-place-abuja-68370.png' alt=''/>\r\n        </div>\r\n        <h2>{business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{business.address}</p>\r\n            <p>{business.city}</p>\r\n            <p>{business.state} {business.zipCode}</p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{business.category}</h3>\r\n            <h3 className=\"rating\">{business.rating} stars</h3>\r\n            <p>{business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n}\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport '../Business/Business.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n          <div className=\"BusinessList\">\r\n            <Business />\r\n            <Business />\r\n            <Business />\r\n            <Business />\r\n            <Business />\r\n            <Business />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nconst sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n  }\r\n\r\n\r\n  class SearchBar extends React.Component {\r\n    renderSortByOptions() {\r\n        return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue}>{sortByOption}</li>;\r\n        });\r\n      }\r\n\r\n      render() {\r\n        return (\r\n          <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n              <ul>{this.renderSortByOptions()}</ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n              <input placeholder=\"Search for flight, accommodation and ride\" />\r\n              <input placeholder=\"Where?\" />\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n              <a href=\"www.#.com\">Let's Go</a>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\n  export default SearchBar;","import React from 'react';\r\nimport './App.css';\r\n// import logo from './logo.svg';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>beta-search</h1>\r\n        <SearchBar />\r\n        <BusinessList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>*/}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}